// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `src/protos/bfv.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:fhers.Ciphertext)
pub struct Ciphertext {
    // message fields
    // @@protoc_insertion_point(field:fhers.Ciphertext.c0)
    pub c0: ::protobuf::MessageField<super::rq::Rq>,
    // message oneof groups
    pub c1: ::std::option::Option<ciphertext::C1>,
    // special fields
    // @@protoc_insertion_point(special_field:fhers.Ciphertext.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Ciphertext {
    fn default() -> &'a Ciphertext {
        <Ciphertext as ::protobuf::Message>::default_instance()
    }
}

impl Ciphertext {
    pub fn new() -> Ciphertext {
        ::std::default::Default::default()
    }

    // bytes c1_seed = 2;

    pub fn c1_seed(&self) -> &[u8] {
        match self.c1 {
            ::std::option::Option::Some(ciphertext::C1::C1Seed(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_c1_seed(&mut self) {
        self.c1 = ::std::option::Option::None;
    }

    pub fn has_c1_seed(&self) -> bool {
        match self.c1 {
            ::std::option::Option::Some(ciphertext::C1::C1Seed(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_c1_seed(&mut self, v: ::std::vec::Vec<u8>) {
        self.c1 = ::std::option::Option::Some(ciphertext::C1::C1Seed(v))
    }

    // Mutable pointer to the field.
    pub fn mut_c1_seed(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(ciphertext::C1::C1Seed(_)) = self.c1 {
        } else {
            self.c1 = ::std::option::Option::Some(ciphertext::C1::C1Seed(::std::vec::Vec::new()));
        }
        match self.c1 {
            ::std::option::Option::Some(ciphertext::C1::C1Seed(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_c1_seed(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_c1_seed() {
            match self.c1.take() {
                ::std::option::Option::Some(ciphertext::C1::C1Seed(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .fhers.Rq c1_poly = 3;

    pub fn c1_poly(&self) -> &super::rq::Rq {
        match self.c1 {
            ::std::option::Option::Some(ciphertext::C1::C1Poly(ref v)) => v,
            _ => <super::rq::Rq as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_c1_poly(&mut self) {
        self.c1 = ::std::option::Option::None;
    }

    pub fn has_c1_poly(&self) -> bool {
        match self.c1 {
            ::std::option::Option::Some(ciphertext::C1::C1Poly(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_c1_poly(&mut self, v: super::rq::Rq) {
        self.c1 = ::std::option::Option::Some(ciphertext::C1::C1Poly(v))
    }

    // Mutable pointer to the field.
    pub fn mut_c1_poly(&mut self) -> &mut super::rq::Rq {
        if let ::std::option::Option::Some(ciphertext::C1::C1Poly(_)) = self.c1 {
        } else {
            self.c1 = ::std::option::Option::Some(ciphertext::C1::C1Poly(super::rq::Rq::new()));
        }
        match self.c1 {
            ::std::option::Option::Some(ciphertext::C1::C1Poly(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_c1_poly(&mut self) -> super::rq::Rq {
        if self.has_c1_poly() {
            match self.c1.take() {
                ::std::option::Option::Some(ciphertext::C1::C1Poly(v)) => v,
                _ => panic!(),
            }
        } else {
            super::rq::Rq::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::rq::Rq>(
            "c0",
            |m: &Ciphertext| { &m.c0 },
            |m: &mut Ciphertext| { &mut m.c0 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "c1_seed",
            Ciphertext::has_c1_seed,
            Ciphertext::c1_seed,
            Ciphertext::set_c1_seed,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::rq::Rq>(
            "c1_poly",
            Ciphertext::has_c1_poly,
            Ciphertext::c1_poly,
            Ciphertext::mut_c1_poly,
            Ciphertext::set_c1_poly,
        ));
        oneofs.push(ciphertext::C1::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Ciphertext>(
            "Ciphertext",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Ciphertext {
    const NAME: &'static str = "Ciphertext";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.c0)?;
                },
                18 => {
                    self.c1 = ::std::option::Option::Some(ciphertext::C1::C1Seed(is.read_bytes()?));
                },
                26 => {
                    self.c1 = ::std::option::Option::Some(ciphertext::C1::C1Poly(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.c0.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.c1 {
            match v {
                &ciphertext::C1::C1Seed(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(2, &v);
                },
                &ciphertext::C1::C1Poly(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.c0.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.c1 {
            match v {
                &ciphertext::C1::C1Seed(ref v) => {
                    os.write_bytes(2, v)?;
                },
                &ciphertext::C1::C1Poly(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Ciphertext {
        Ciphertext::new()
    }

    fn clear(&mut self) {
        self.c0.clear();
        self.c1 = ::std::option::Option::None;
        self.c1 = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Ciphertext {
        static instance: Ciphertext = Ciphertext {
            c0: ::protobuf::MessageField::none(),
            c1: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Ciphertext {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Ciphertext").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Ciphertext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ciphertext {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Ciphertext`
pub mod ciphertext {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:fhers.Ciphertext.c1)
    pub enum C1 {
        // @@protoc_insertion_point(oneof_field:fhers.Ciphertext.c1_seed)
        C1Seed(::std::vec::Vec<u8>),
        // @@protoc_insertion_point(oneof_field:fhers.Ciphertext.c1_poly)
        C1Poly(super::super::rq::Rq),
    }

    impl ::protobuf::Oneof for C1 {
    }

    impl ::protobuf::OneofFull for C1 {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Ciphertext as ::protobuf::MessageFull>::descriptor().oneof_by_name("c1").unwrap()).clone()
        }
    }

    impl C1 {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<C1>("c1")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:fhers.KeySwitchingKey)
pub struct KeySwitchingKey {
    // message fields
    // @@protoc_insertion_point(field:fhers.KeySwitchingKey.seed)
    pub seed: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:fhers.KeySwitchingKey.size)
    pub size: u32,
    // @@protoc_insertion_point(field:fhers.KeySwitchingKey.c0)
    pub c0: ::std::vec::Vec<super::rq::Rq>,
    // special fields
    // @@protoc_insertion_point(special_field:fhers.KeySwitchingKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeySwitchingKey {
    fn default() -> &'a KeySwitchingKey {
        <KeySwitchingKey as ::protobuf::Message>::default_instance()
    }
}

impl KeySwitchingKey {
    pub fn new() -> KeySwitchingKey {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "seed",
            |m: &KeySwitchingKey| { &m.seed },
            |m: &mut KeySwitchingKey| { &mut m.seed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "size",
            |m: &KeySwitchingKey| { &m.size },
            |m: &mut KeySwitchingKey| { &mut m.size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "c0",
            |m: &KeySwitchingKey| { &m.c0 },
            |m: &mut KeySwitchingKey| { &mut m.c0 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeySwitchingKey>(
            "KeySwitchingKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeySwitchingKey {
    const NAME: &'static str = "KeySwitchingKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.seed = is.read_bytes()?;
                },
                16 => {
                    self.size = is.read_uint32()?;
                },
                26 => {
                    self.c0.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.seed.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.seed);
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.size);
        }
        for value in &self.c0 {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.seed.is_empty() {
            os.write_bytes(1, &self.seed)?;
        }
        if self.size != 0 {
            os.write_uint32(2, self.size)?;
        }
        for v in &self.c0 {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeySwitchingKey {
        KeySwitchingKey::new()
    }

    fn clear(&mut self) {
        self.seed.clear();
        self.size = 0;
        self.c0.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeySwitchingKey {
        static instance: KeySwitchingKey = KeySwitchingKey {
            seed: ::std::vec::Vec::new(),
            size: 0,
            c0: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeySwitchingKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeySwitchingKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeySwitchingKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeySwitchingKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:fhers.RelinearizationKey)
pub struct RelinearizationKey {
    // message fields
    // @@protoc_insertion_point(field:fhers.RelinearizationKey.ksk)
    pub ksk: ::protobuf::MessageField<KeySwitchingKey>,
    // special fields
    // @@protoc_insertion_point(special_field:fhers.RelinearizationKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RelinearizationKey {
    fn default() -> &'a RelinearizationKey {
        <RelinearizationKey as ::protobuf::Message>::default_instance()
    }
}

impl RelinearizationKey {
    pub fn new() -> RelinearizationKey {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, KeySwitchingKey>(
            "ksk",
            |m: &RelinearizationKey| { &m.ksk },
            |m: &mut RelinearizationKey| { &mut m.ksk },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RelinearizationKey>(
            "RelinearizationKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RelinearizationKey {
    const NAME: &'static str = "RelinearizationKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ksk)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ksk.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ksk.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RelinearizationKey {
        RelinearizationKey::new()
    }

    fn clear(&mut self) {
        self.ksk.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RelinearizationKey {
        static instance: RelinearizationKey = RelinearizationKey {
            ksk: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RelinearizationKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RelinearizationKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RelinearizationKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelinearizationKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14src/protos/bfv.proto\x12\x05fhers\x1a\x13src/protos/rq.proto\"n\n\
    \nCiphertext\x12\x19\n\x02c0\x18\x01\x20\x01(\x0b2\t.fhers.RqR\x02c0\x12\
    \x19\n\x07c1_seed\x18\x02\x20\x01(\x0cH\0R\x06c1Seed\x12$\n\x07c1_poly\
    \x18\x03\x20\x01(\x0b2\t.fhers.RqH\0R\x06c1PolyB\x04\n\x02c1\"T\n\x0fKey\
    SwitchingKey\x12\x12\n\x04seed\x18\x01\x20\x01(\x0cR\x04seed\x12\x12\n\
    \x04size\x18\x02\x20\x01(\rR\x04size\x12\x19\n\x02c0\x18\x03\x20\x03(\
    \x0b2\t.fhers.RqR\x02c0\">\n\x12RelinearizationKey\x12(\n\x03ksk\x18\x01\
    \x20\x01(\x0b2\x16.fhers.KeySwitchingKeyR\x03kskJ\x9a\x04\n\x06\x12\x04\
    \0\0\x16\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\
    \0\x1d\n\x08\n\x01\x02\x12\x03\x04\0\x0e\n\n\n\x02\x04\0\x12\x04\x06\0\
    \x0c\x01\n\n\n\x03\x04\0\x01\x12\x03\x06\x08\x12\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x07\x04\x0e\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x07\x04\x06\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x07\x07\t\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x07\x0c\r\n\x0c\n\x04\x04\0\x08\0\x12\x04\x08\x04\x0b\x05\n\x0c\
    \n\x05\x04\0\x08\0\x01\x12\x03\x08\n\x0c\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\t\x08\x1a\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\t\x08\r\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\t\x0e\x15\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\t\x18\x19\n\x0b\n\x04\x04\0\x02\x02\x12\x03\n\x08\x17\n\x0c\n\x05\
    \x04\0\x02\x02\x06\x12\x03\n\x08\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\
    \n\x0b\x12\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\n\x15\x16\n\n\n\x02\x04\
    \x01\x12\x04\x0e\0\x12\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0e\x08\x17\n\
    \x0b\n\x04\x04\x01\x02\0\x12\x03\x0f\x04\x13\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03\x0f\x04\t\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0f\n\x0e\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0f\x11\x12\n\x0b\n\x04\x04\x01\x02\
    \x01\x12\x03\x10\x04\x14\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x10\x04\
    \n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x10\x0b\x0f\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03\x10\x12\x13\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\
    \x11\x04\x17\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03\x11\x04\x0c\n\x0c\n\
    \x05\x04\x01\x02\x02\x06\x12\x03\x11\r\x0f\n\x0c\n\x05\x04\x01\x02\x02\
    \x01\x12\x03\x11\x10\x12\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x11\x15\
    \x16\n\n\n\x02\x04\x02\x12\x04\x14\0\x16\x01\n\n\n\x03\x04\x02\x01\x12\
    \x03\x14\x08\x1a\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x15\x04\x1c\n\x0c\n\
    \x05\x04\x02\x02\0\x06\x12\x03\x15\x04\x13\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03\x15\x14\x17\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x15\x1a\x1bb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::rq::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Ciphertext::generated_message_descriptor_data());
            messages.push(KeySwitchingKey::generated_message_descriptor_data());
            messages.push(RelinearizationKey::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
